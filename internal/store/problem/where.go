// Code generated by ent, DO NOT EDIT.

package problem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/FischukSergey/chat-service/internal/store/predicate"
	"github.com/FischukSergey/chat-service/internal/types"
)

// ID filters vertices based on their ID field.
func ID(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id types.ProblemID) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldID, id))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldManagerID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldChatID, v))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDGT applies the GT predicate on the "manager_id" field.
func ManagerIDGT(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldManagerID, v))
}

// ManagerIDGTE applies the GTE predicate on the "manager_id" field.
func ManagerIDGTE(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldManagerID, v))
}

// ManagerIDLT applies the LT predicate on the "manager_id" field.
func ManagerIDLT(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldManagerID, v))
}

// ManagerIDLTE applies the LTE predicate on the "manager_id" field.
func ManagerIDLTE(v types.UserID) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldManagerID, v))
}

// ManagerIDContains applies the Contains predicate on the "manager_id" field.
func ManagerIDContains(v types.UserID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldContains(FieldManagerID, vc))
}

// ManagerIDHasPrefix applies the HasPrefix predicate on the "manager_id" field.
func ManagerIDHasPrefix(v types.UserID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldHasPrefix(FieldManagerID, vc))
}

// ManagerIDHasSuffix applies the HasSuffix predicate on the "manager_id" field.
func ManagerIDHasSuffix(v types.UserID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldHasSuffix(FieldManagerID, vc))
}

// ManagerIDEqualFold applies the EqualFold predicate on the "manager_id" field.
func ManagerIDEqualFold(v types.UserID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldEqualFold(FieldManagerID, vc))
}

// ManagerIDContainsFold applies the ContainsFold predicate on the "manager_id" field.
func ManagerIDContainsFold(v types.UserID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldContainsFold(FieldManagerID, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldUpdatedAt, v))
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldChatID, v))
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldChatID, v))
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldChatID, vs...))
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldChatID, vs...))
}

// ChatIDGT applies the GT predicate on the "chat_id" field.
func ChatIDGT(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldChatID, v))
}

// ChatIDGTE applies the GTE predicate on the "chat_id" field.
func ChatIDGTE(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldChatID, v))
}

// ChatIDLT applies the LT predicate on the "chat_id" field.
func ChatIDLT(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldChatID, v))
}

// ChatIDLTE applies the LTE predicate on the "chat_id" field.
func ChatIDLTE(v types.ChatID) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldChatID, v))
}

// ChatIDContains applies the Contains predicate on the "chat_id" field.
func ChatIDContains(v types.ChatID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldContains(FieldChatID, vc))
}

// ChatIDHasPrefix applies the HasPrefix predicate on the "chat_id" field.
func ChatIDHasPrefix(v types.ChatID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldHasPrefix(FieldChatID, vc))
}

// ChatIDHasSuffix applies the HasSuffix predicate on the "chat_id" field.
func ChatIDHasSuffix(v types.ChatID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldHasSuffix(FieldChatID, vc))
}

// ChatIDEqualFold applies the EqualFold predicate on the "chat_id" field.
func ChatIDEqualFold(v types.ChatID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldEqualFold(FieldChatID, vc))
}

// ChatIDContainsFold applies the ContainsFold predicate on the "chat_id" field.
func ChatIDContainsFold(v types.ChatID) predicate.Problem {
	vc := v.String()
	return predicate.Problem(sql.FieldContainsFold(FieldChatID, vc))
}

// HasChat applies the HasEdge predicate on the "chat" edge.
func HasChat() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChatTable, ChatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatWith applies the HasEdge predicate on the "chat" edge with a given conditions (other predicates).
func HasChatWith(preds ...predicate.Chat) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newChatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.NotPredicates(p))
}
