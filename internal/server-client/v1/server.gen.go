// Package clientv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package clientv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/FischukSergey/chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// GetHistoryRequest defines model for GetHistoryRequest.
type GetHistoryRequest struct {
	// Cursor Курсор для пагинации
	Cursor   *string `json:"cursor"`
	PageSize *int    `json:"pageSize"`
}

// GetHistoryResponse defines model for GetHistoryResponse.
type GetHistoryResponse struct {
	Data MessagesPage `json:"data"`
}

// Message defines model for Message.
type Message struct {
	AuthorId  types.UserID    `json:"authorId"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	Id        types.MessageID `json:"id"`
}

// MessagesPage defines model for MessagesPage.
type MessagesPage struct {
	Messages []Message `json:"messages"`

	// NextCursor Курсор для следующей страницы.
	// Если нет следующей страницы, то не возвращается.
	// Если нет курсора, то возвращается пустая строка.
	NextCursor *string `json:"nextCursor"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = openapi_types.UUID

// PostGetHistoryParams defines parameters for PostGetHistory.
type PostGetHistoryParams struct {
	// XRequestID Unique request identifier
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetHistoryJSONRequestBody defines body for PostGetHistory for application/json ContentType.
type PostGetHistoryJSONRequestBody = GetHistoryRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/getHistory)
	PostGetHistory(ctx echo.Context, params PostGetHistoryParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGetHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Request-ID", valueList[0], &XRequestID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGetHistory(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/getHistory", wrapper.PostGetHistory)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWy24bNxd+FYL/vxzNKM0mmF0uSOKiRY04RgNYXtCjY4nJ3EJyDKuCAEsKEgRuHaBA",
	"N930FVTFgpXYll/h8I2KwxlZsuVcWiAricPDc/m+j+ewy6MsybMUUqN52OW5UCIBA8qtnj2BlwVos/bg",
	"MYgmKPrWBB0pmRuZpTzkm6l8WQBTpR2TTUiN3JWguMclGbTLgx5PRQI85M9qlc/a2gPucTooFTR5aFQB",
	"HtdRGxJBcXYzlQjDQ14Ussk9bjo5nddGybTFe73e3Nhl+gjMY6lNpjqVe1eMynJQRoIziQqlsxtKwD/t",
	"0B7YPs7sAcNjPLXvGF7gCN/jFM9xZF/jFKdUQRHHYieGea7XMvJ4LlqwIX+BMsauKGLDw1t1jydiXyZF",
	"QgtaybRafdKnTA20QHGqsvqU7TyHyFCY5Vp1nqUaVottCuNQ/L+CXR7y/wULmoMKtuBH0Fq0QK+LFrhI",
	"CzK2SgfbN0SvTq2GFIVpZ2qt+WXyPL5fa2W16iP9aH9Tg3KKuNyqySTPVEmkMG0e8pY07WLHj7IkeCh1",
	"1C5ebIBqQSeI2sLUNKg9GUFA2KlUxIFz7ArbyZod8rPCWKRAGGjeNVeSbgoDNSMT4DeQLP9jgRVu36jG",
	"a+y5nC4JqQBYLvczzJZ6WKE3qXbpvzSQ6K+UF19IWCglOrROYd/c/xfX0fbxFCd4bIf2yL7FCX5gtm8H",
	"9gBHeI5T+9oe+o0U/3B2U4bnOLGDrznlMTvAmTvAcIwzPMEx7du3OCIftm/f3eAZPy5yxNHcySfOM7yw",
	"QwqMI1eKy2CGH3HkN9Ivt5VrzF7SsMogdUSICiVNZ4M4KLnaAaFA3S1IXfPVw7l6v//5Ka/6KHkqdxdy",
	"bhuTl+KS6W62ytXd9bUliib2AMc4tX0cMfsGR4QKjn3WSPF32mZ4giO8oOpt3x4y9zMkZhw6Y/Jjj+ag",
	"nRF+OMNjnOEZW/9p46m/cDRz9gTwIcOpsz0ixl85Rs4oNus2XBNr8JB1fd/v9ciSSOw2OCiVqcWO30gb",
	"Kf5lDypfb0qF4CRkVYkzx9sQL/AcZ1QdFTvBE4Z/4whPqFB7iB/Y5pMfQkawhUEQZ5GI25k24Z36nfoi",
	"eZLDgMQ0JtQucEITxr7CKWminDbMDmnhADsvoRpQZNvHqR3gBE/tr2UmvzmQ3uOMQpeCMtKQmvg9kb5g",
	"G0VOHYbdbwvD7scSUkM1cY/vgdIljXu36FJmOaQilzzkt/26f5t7riU5DQV7t4LW5dRxvSErR+xVPTwC",
	"w6hPsXZp6XPnVgnap8nA1zNtFvPLxVg8OLZubigLk2DlQdLbLq8HaHOvavJRlhpIXXYiz2MZuejBc00p",
	"dpdeGJ9rXqvviWs9lu6q+1BOYAfTd/X6N0mgGvIug6uAz1s2i6U2PlksdwGH6PL939omvGiIzPG+6u4B",
	"7EGc5QmJpLTiHi9UXLWCFU3z3nbvnwAAAP//KO71lEIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
