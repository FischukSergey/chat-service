# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/FischukSergey/chat-service # FIXME сделал
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.61.0
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches/golangci-lint" # сделал отдельную директорию для кэша

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.10.1
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.33.2

  DOCKER_COMPOSE_PATHS: >-
    -f ./deploy/local/docker-compose.yml
    -f ./deploy/local/docker-compose.sentry.yml

  DOCKER_COMPOSE_CMD: "docker compose"

tasks:
  default:
    cmds:
      # Последовательно выполняем таски tidy, fmt, lint, tests и build
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - gofumpt -w {{.GO_FILES}}
    - gci write --section Standard --section Default --section "Prefix({{.GO_MODULE}})" {{.GO_FILES}}

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install dev tools"
      - for tool in {{.DEV_TOOLS}}; do go install $$tool; done

  generate:
    cmds:
      - echo "Run go generate..."
      - go generate ./...
    # Пригодится для выполнения задачи со "звездочкой" ниже. Или попозже.

# работаем с docker compose
  deps:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS}} up -d"

  deps:cmd:
    cmds:
      # Дать произвольную команду "docker compose"-у.
      # `task deps:cmd -- rm -fsv` == `docker compose rm -fsv`
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS}} ps"

  deps:logs:
    cmds:
      # Показывает логи всех сервисов или одного, например,
      # `task deps:logs`
      # `task deps:logs -- postgres`
      - "{{.DOCKER_COMPOSE_CMD}} -f {{.DOCKER_COMPOSE_PATHS}} logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      # Останавливает запущенные сервисы.
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"